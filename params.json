{"body":"Grails Guard\r\n=======================\r\nThis plugin provides a convenient way to run integration tests without having to suffer repetitive startup costs. Each time an\r\nintegration test suite runs, the grails environment must be compiled and bootstrapped. For a large application, especially one with many domain objects, this\r\ncan take over a minute just to run a single testcase. Over the course of several months this can lead to days of lost productivity just waiting\r\nfor tests to run. \r\n\r\nThis plugin borrows from the similarly named Rails plugin (although it is more targeted at just running tests in this incarnation).\r\n\r\nThe plugin essentially runs the tests in a loop, detecting changes to the application (and tests), recompiling, and re-running the tests.\r\n\r\nUsage\r\n-----\r\nTo run your tests in guard mode, you need to do two things:\r\n\r\n1. Ensure that the spring reloading agent is active for test-app *(it is NOT by default for test-app, only run-app)*.\r\n2. Run your testing in guard mode by replacing \"integration:\" with \"guard:\" when running test-app.\r\n\r\nThe minimum required is this:\r\n\r\n    grails -reloading test-app guard: <testpatterns...>\r\n\r\nIf you want to see the console output, use:\r\n\r\n    grails -reloading -echoOut test-app guard: <testpatterns...>\r\n\r\nFinally, to make life easier, just create an alias in your .bashrc:\r\n\r\n    alias guard='grails -reloading -echoOut test-app guard: '\r\n\r\nThen run:\r\n\r\n    guard my.package.*\r\n    guard MyService\r\n    guard MyService MyOtherService\r\n\r\nThis will first run the integration tests given just like the \"integration:\" phase would. Then it will enter\r\na mode where it detects changes to any artefacts and testcases. When a change is detected, it will indicate which artefact was changed\r\nand then run the same tests again with the updates.\r\n\r\nConfiguration\r\n-------------\r\n* The scan frequency is every 3 seconds but can be configured via the \"rerun.frequency\" property.\r\n\r\nIntelliJ Support\r\n--------------\r\nIntelliJ (and possibly Eclipse though I haven't tried it) can also be used to run guard mode.\r\n\r\nIn IntelliJ, run an integration test once normally. This will give you a \"configuration\" for the test case which can be edited.\r\nClick to edit the profile and change \"integration:\" to \"guard:\" and add the \"-reloading\" flag to the end of the command line\r\n(ensure no other -* flags are prior such as -echoOut).\r\n\r\nWhen you run that configuration, IntelliJ will process the tests normally and then \"spin\" as if it's waiting for more tests. As you modify files,\r\nyou will see the same tests run again. Since guard never notifies the listeners that the test run is complete, IntelliJ will continue waiting for\r\ntests until you stop it manually.\r\n\r\nKnown Issues\r\n------------\r\n* Since the environment is not reloaded, tests must be careful to cleanup after themselves, even if running against the in-memory database since the create-drop\r\nonly happens when the environment is bootstrapped.\r\n* GRAILS-8026 causes the -reloading flag to be a bit picky. When running from the command line, ensure that it is the first option specified, otherwise it may be ignored\r\n\r\n","name":"Grails Guard Plugin","tagline":"Provides a way to execute Grails integration tests automatically when tests or artifacts change. This is very similar to the Rails plugin of the same name and a distant cousin of Spork.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}